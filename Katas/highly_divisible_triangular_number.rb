

# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:#
#              1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...#
#     Let us list the factors of the first seven triangle numbers:#
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.#
#     What is the value of the first triangle number to have over five hundred divisors?
class HighlyDivisibleTriangularNumber

def highly_divisible_traingular_number
  result = []
  factors = []
(1..8).each do |number|
  result.push add(number)
end
  puts result
  result.each do |number|
    (1..9).each do |value|
      if number%value == 0
        factors.push value
      end
    end
    factors.push multiply_to(factors,number)
    # if factors.size > 1
    # factors.each_index do |index|
    #
    #   if (factors[index]*factors[index+1])<=number
    #   if number%(factors[index]*factors[index+1]) == 0
    #     factors.push (factors[index]*factors[index+1])
    #   end
    #   end
    #   end
  end
  puts factors
  end

  def add(n)
    if n<=1
       1
    else n+add(n-1)
    end
  end
def multiply_to (array,n)
  numbers = array.map{|x|[x]}
  pairs = []

  for i in 0..numbers.length-1
    pairs.concat numbers[i].product(array)
  end
  factors.push pairs.count{|a,b|a * b == n}

end
end

obj = HighlyDivisibleTriangularNumber.new
obj.highly_divisible_traingular_number